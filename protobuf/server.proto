syntax = "proto2";
package starbelly;

import "protobuf/shared.proto";

// An Event is sent for any active subscription whenever data is available for
// that subscription.
message Event {
    required int32 subscription_id = 1;

    // An event is required to have a body, but I don't know how to make it
    // required in protobuf.
    oneof Body {
        JobList job_list = 2;
        JobScheduleList job_schedule_list = 7;
        ResourceFrame resource_frame = 3;
        SubscriptionClosed subscription_closed = 4;
        SyncItem sync_item = 5;
        TaskMonitor task_monitor = 6;
    }
}

// Performance profile data for a single function.
message PerformanceProfileFunction {
    optional string file = 1;
    optional int32 line_number = 2;
    optional string function = 3;
    optional int32 calls = 4;
    optional int32 non_recursive_calls = 5;
    optional double total_time = 6;
    optional double cumulative_time = 7;
}

// Data about resource consumption.
message ResourceFrame {
    optional string timestamp = 1;
    repeated ResourceFrameCpu cpus = 2;
    optional ResourceFrameMemory memory = 3;
    repeated ResourceFrameDisk disks = 4;
    repeated ResourceFrameNetwork networks = 5;
    repeated ResourceFrameCrawl crawls = 6;
    optional ResourceFrameRateLimiter rate_limiter = 7;
    optional ResourceFrameDownloader downloader = 8;
}

// CPU usage.
message ResourceFrameCpu {
    optional double usage = 1;
}

// Resources used by a crawl job.
message ResourceFrameCrawl {
    optional bytes job_id = 1;
    optional int32 frontier = 2;
    optional int32 pending = 3;
    optional int32 extraction = 4;
}

// Disk usage.
message ResourceFrameDisk {
    optional string mount = 1;
    optional int64 used = 2;
    optional int64 total = 3;
}

// Resources used by downloader.
message ResourceFrameDownloader {
    optional int32 count = 1;
}

// Memory usage.
message ResourceFrameMemory {
    optional int64 used = 1;
    optional int64 total = 2;
}

// Network usage.
message ResourceFrameNetwork {
    optional string name = 1;
    optional int64 sent = 2;
    optional int64 received = 3;
}

// Resources used by rate limiter.
message ResourceFrameRateLimiter {
    optional int32 count = 1;
}

// The server sends exactly one Response for each Request it receives.
message Response {
    // The request ID will match the request that prompted this response.
    required int32 request_id = 1;
    required bool is_success = 2;
    optional string error_message = 3;

    // The body is optional. Some commands only need to return success/error
    // data.
    oneof Body {
        CaptchaSolver solver = 22;
        DomainLogin domain_login = 5;
        DomainLoginUser domain_login_user = 6;
        Job job = 7;
        JobSchedule job_schedule = 19;
        Policy policy = 8;
        ResponseListCaptchaSolvers list_captcha_solvers = 23;
        ResponseListDomainLogins list_domain_logins = 9;
        ResponseListItems list_items = 10;
        ResponseListJobs list_jobs = 11;
        ResponseListJobSchedules list_job_schedules = 20;
        ResponseListPolicies list_policies = 12;
        ResponseListRateLimits list_rate_limits = 13;
        ResponseNewCaptchaSolver new_solver = 24;
        ResponseNewJob new_job = 14;
        ResponseNewJobSchedule new_job_schedule = 21;
        ResponseNewPolicy new_policy = 15;
        ResponseNewSubscription new_subscription = 16;
        ResponsePerformanceProfile performance_profile = 17;
        ResponsePing ping = 18;
    }
}

// Return a list of CAPTCHA solvers.
message ResponseListCaptchaSolvers {
    repeated CaptchaSolver solvers = 1;

    // The total number of solvers (not the count of solvers included in
    // this response).
    optional int32 total = 2;
}

// Return a list of domain logins.
message ResponseListDomainLogins {
    repeated DomainLogin logins = 1;

    // The total number of domains (not the count of domains included in
    // this response).
    optional int32 total = 2;
}

// Return a list of items (crawl responses) for a job.
message ResponseListItems {
    repeated CrawlResponse items = 1;

    // The total number of items (not the count of items included in this
    // response).
    optional int32 total = 2;
}

// Return a list of jobs.
message ResponseListJobs {
    repeated Job jobs = 1;

    // The total number of jobs (not the count of jobs included in this
    // response).
    optional int32 total = 2;
}

// Return a list of job schedules.
message ResponseListJobSchedules {
    repeated JobSchedule job_schedules = 1;

    // The total number of job schedules (not just the ones included in this
    // response).
    optional int32 total = 2;
}

// Return a list of jobs.
message ResponseListPolicies {
    repeated Policy policies = 1;

    // The total number of jobs (not the count of jobs included in this
    // response).
    optional int32 total = 2;
}

// Return a list of rate limits.
message ResponseListRateLimits {
    repeated RateLimit rate_limits = 1;

    // The total number of rate limits (not the count of rate limits included
    // in this response).
    optional int32 total = 2;
}

// A response containing the ID of a newly created CAPTCHA solver.
message ResponseNewCaptchaSolver {
    required bytes solver_id = 1;
}

// A response containing the ID of a newly created job.
message ResponseNewJob {
    required bytes job_id = 1;
}

// A response containing the ID of a newly created job schedule.
message ResponseNewJobSchedule {
    required bytes schedule_id = 1;
}

// A response containing the ID of a newly created policy.
message ResponseNewPolicy {
    required bytes policy_id = 1;
}

// A response containing the ID of a newly created subscription.
message ResponseNewSubscription {
    required int32 subscription_id = 1;
}

// Contains performance profile data.
message ResponsePerformanceProfile {
    optional int32 total_calls = 1;
    optional double total_time = 2;
    repeated PerformanceProfileFunction functions = 3;
}

// Returns the string received in RequestPing.
message ResponsePing {
    optional string pong = 1;
}

// An item sent when syncing a crawl job. One event is sent for each crawl
// response.
message SyncItem {
    required CrawlResponse item = 1;
    required bytes token = 2;
}

// A wrapper for all server messages that contains either a response to a
// command or a subscription event.
message ServerMessage {
    oneof MessageType {
        Event event = 1;
        Response response = 2;
    }
}

// Sent when the server ends a subscription.
message SubscriptionClosed {
    enum Reason {
        COMPLETE = 1;
        ERROR = 2;
    }

    required Reason reason = 1;
    optional string message = 2;
}

// A single asyncio task.
message Task {
    optional string name = 1;
    optional int32 count = 2;
}

// Status of asyncio tasks.
message TaskMonitor {
    optional int32 count = 1;
    repeated Task tasks = 2;
}
