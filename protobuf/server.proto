syntax = "proto2";
package starbelly;

import "protobuf/shared.proto";

// An Event is sent for any active subscription whenever data is available for
// that subscription.
message Event {
    required int32 subscription_id = 1;

    // An event is required to have a body, but I don't know how to make it
    // required in protobuf.
    oneof Body {
        CrawlItem crawl_item = 2;
        JobList job_list = 4;
        SubscriptionClosed subscription_closed = 5;
    }
}

// The server sends exactly one Response for each Request it receives.
message Response {
    // The request ID will match the request that prompted this response.
    required int32 request_id = 1;
    required bool is_success = 2;
    optional string error_message = 3;

    // The body is optional. Some commands only need to return success/error
    // data.
    oneof Body {
        Job job = 5;
        Policy policy = 6;
        ResponseListItems list_items = 7;
        ResponseListJobs list_jobs = 8;
        ResponseListPolicies list_policies = 9;
        ResponseListRateLimits list_rate_limits = 10;
        ResponseNewJob new_job = 11;
        ResponseNewPolicy new_policy = 12;
        ResponseNewSubscription new_subscription = 13;
        ResponsePing ping = 14;
    }
}

/// Return a list of items.
message ResponseListItems {
    repeated CrawlItem items = 1;

    // The total number of items (not the count of items included in this
    // response).
    optional int32 total = 2;
}

/// Return a list of jobs.
message ResponseListJobs {
    repeated Job jobs = 1;

    // The total number of jobs (not the count of jobs included in this
    // response).
    optional int32 total = 2;
}

/// Return a list of jobs.
message ResponseListPolicies {
    repeated Policy policies = 1;

    // The total number of jobs (not the count of jobs included in this
    // response).
    optional int32 total = 2;
}

/// Return a list of items.
message ResponseListRateLimits {
    repeated RateLimit rate_limits = 1;

    // The total number of rate limits (not the count of rate limits included
    // in this response).
    optional int32 total = 2;
}

/// A response containing the ID of a newly created job.
message ResponseNewJob {
    required bytes job_id = 1;
}

/// A response containing the ID of a newly created policy.
message ResponseNewPolicy {
    required bytes policy_id = 1;
}

/// A response containing the ID of a newly created subscription.
message ResponseNewSubscription {
    required int32 subscription_id = 1;
}

// Returns the string received in RequestPing.
message ResponsePing {
    optional string pong = 1;
}

// A wrapper for all server messages that contains either a response to a
// command or a subscription event.
message ServerMessage {
    oneof MessageType {
        Event event = 1;
        Response response = 2;
    }
}

// Sent when the server ends a subscription.
message SubscriptionClosed {
    enum Reason {
        UNKNOWN = 1;
        END = 2;
        ERROR = 3;
    }

    required Reason reason = 1;
    optional string message = 2;
}
